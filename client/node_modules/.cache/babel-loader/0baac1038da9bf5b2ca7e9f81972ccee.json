{"ast":null,"code":"var _jsxFileName = \"/Users/annehomann/coder_academy/term4/moviemate/client/src/components/views/MovieDetail/MovieDetail.js\";\n// Details of each movie\nimport React, { useEffect, useState } from 'react';\nimport { List, Avatar, Row, Col, Button } from 'antd';\nimport axios from 'axios';\nimport Comments from './Sections/Comments';\nimport LikeDislikes from './Sections/LikeDislikes';\nimport { API_URL, API_KEY, IMAGE_BASE_URL, IMAGE_SIZE } from '../../Config';\nimport GridCards from '../../commons/GridCards';\nimport MainImage from '../../views/LandingPage/Sections/MainImage';\nimport MovieInfo from './Sections/MovieInfo';\nimport Favourite from './Sections/Favourite'; // This function brings in details of the individual movie\n\nfunction MovieDetailPage(props) {\n  const movieId = props.match.params.movieId;\n  const [Movie, setMovie] = useState([]);\n  const [Casts, setCasts] = useState([]);\n  const [CommentLists, setCommentLists] = useState([]);\n  const [LoadingForMovie, setLoadingForMovie] = useState(true);\n  const [LoadingForCasts, setLoadingForCasts] = useState(true);\n  const [ActorToggle, setActorToggle] = useState(false);\n  const movieVariable = {\n    movieId: movieId\n  };\n  useEffect(() => {\n    let endpointForMovieInfo = `${API_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`;\n    fetchDetailInfo(endpointForMovieInfo); // Promise HTTP request\n\n    axios.post('/api/comment/getComments', movieVariable).then(response => {\n      console.log(response);\n\n      if (response.data.success) {\n        console.log('response.data.comments', response.data.comments);\n        setCommentLists(response.data.comments);\n      } else {\n        alert('Failed to get comments Info');\n      }\n    });\n  }, []);\n\n  const toggleActorView = () => {\n    setActorToggle(!ActorToggle);\n  };\n\n  const fetchDetailInfo = endpoint => {\n    fetch(endpoint).then(result => result.json()).then(result => {\n      console.log(result);\n      setMovie(result);\n      setLoadingForMovie(false);\n      let endpointForCasts = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n      fetch(endpointForCasts).then(result => result.json()).then(result => {\n        console.log(result);\n        setCasts(result.cast);\n      });\n      setLoadingForCasts(false);\n    }).catch(error => console.error('Error:', error));\n  };\n\n  const updateComment = newComment => {\n    setCommentLists(CommentLists.concat(newComment));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, !LoadingForMovie ? /*#__PURE__*/React.createElement(MainImage, {\n    image: `${IMAGE_BASE_URL}${IMAGE_SIZE}${Movie.backdrop_path}`,\n    title: Movie.original_title,\n    text: Movie.overview,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }, \"Loading...\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: '85%',\n      margin: '1rem auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'flex-end'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Favourite, {\n    movieInfo: Movie,\n    movieId: movieId,\n    userFrom: localStorage.getItem('userId'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 21\n    }\n  })), !LoadingForMovie ? /*#__PURE__*/React.createElement(MovieInfo, {\n    movie: Movie,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 21\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 21\n    }\n  }, \"loading...\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center',\n      margin: '2rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: toggleActorView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 21\n    }\n  }, \"Toggle Actor View \")), ActorToggle && /*#__PURE__*/React.createElement(Row, {\n    gutter: [16, 16],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 21\n    }\n  }, !LoadingForCasts ? Casts.map((cast, index) => cast.profile_path && /*#__PURE__*/React.createElement(GridCards, {\n    actor: true,\n    image: cast.profile_path,\n    characterName: cast.characterName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 33\n    }\n  })) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 33\n    }\n  }, \"loading...\")), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(LikeDislikes, {\n    video: true,\n    videoId: movieId,\n    userId: localStorage.getItem('userId'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: '2rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Comments, {\n    movieTitle: Movie.original_title,\n    CommentLists: CommentLists,\n    postId: movieId,\n    refreshFunction: updateComment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 21\n    }\n  }))));\n}\n\nexport default MovieDetailPage;","map":{"version":3,"sources":["/Users/annehomann/coder_academy/term4/moviemate/client/src/components/views/MovieDetail/MovieDetail.js"],"names":["React","useEffect","useState","List","Avatar","Row","Col","Button","axios","Comments","LikeDislikes","API_URL","API_KEY","IMAGE_BASE_URL","IMAGE_SIZE","GridCards","MainImage","MovieInfo","Favourite","MovieDetailPage","props","movieId","match","params","Movie","setMovie","Casts","setCasts","CommentLists","setCommentLists","LoadingForMovie","setLoadingForMovie","LoadingForCasts","setLoadingForCasts","ActorToggle","setActorToggle","movieVariable","endpointForMovieInfo","fetchDetailInfo","post","then","response","console","log","data","success","comments","alert","toggleActorView","endpoint","fetch","result","json","endpointForCasts","cast","catch","error","updateComment","newComment","concat","backdrop_path","original_title","overview","width","margin","display","justifyContent","localStorage","getItem","map","index","profile_path","characterName","marginTop"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,GAAvB,EAA4BC,GAA5B,EAAiCC,MAAjC,QAA+C,MAA/C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,SAASC,OAAT,EAAkBC,OAAlB,EAA2BC,cAA3B,EAA2CC,UAA3C,QAA6D,cAA7D;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,SAAP,MAAsB,4CAAtB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,SAAP,MAAsB,sBAAtB,C,CAEA;;AACA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC5B,QAAMC,OAAO,GAAGD,KAAK,CAACE,KAAN,CAAYC,MAAZ,CAAmBF,OAAnC;AACA,QAAM,CAACG,KAAD,EAAQC,QAAR,IAAoBvB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACwB,KAAD,EAAQC,QAAR,IAAoBzB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAAC0B,YAAD,EAAeC,eAAf,IAAkC3B,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAAC4B,eAAD,EAAkBC,kBAAlB,IAAwC7B,QAAQ,CAAC,IAAD,CAAtD;AACA,QAAM,CAAC8B,eAAD,EAAkBC,kBAAlB,IAAwC/B,QAAQ,CAAC,IAAD,CAAtD;AACA,QAAM,CAACgC,WAAD,EAAcC,cAAd,IAAgCjC,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAMkC,aAAa,GAAG;AAClBf,IAAAA,OAAO,EAAEA;AADS,GAAtB;AAIApB,EAAAA,SAAS,CAAC,MAAM;AAEZ,QAAIoC,oBAAoB,GAAI,GAAE1B,OAAQ,SAAQU,OAAQ,YAAWT,OAAQ,iBAAzE;AACA0B,IAAAA,eAAe,CAACD,oBAAD,CAAf,CAHY,CAKZ;;AACA7B,IAAAA,KAAK,CAAC+B,IAAN,CAAW,0BAAX,EAAuCH,aAAvC,EACKI,IADL,CACUC,QAAQ,IAAI;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;;AACA,UAAIA,QAAQ,CAACG,IAAT,CAAcC,OAAlB,EAA2B;AACvBH,QAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCF,QAAQ,CAACG,IAAT,CAAcE,QAApD;AACAjB,QAAAA,eAAe,CAACY,QAAQ,CAACG,IAAT,CAAcE,QAAf,CAAf;AACH,OAHD,MAGO;AACHC,QAAAA,KAAK,CAAC,6BAAD,CAAL;AACH;AACJ,KATL;AAWH,GAjBQ,EAiBN,EAjBM,CAAT;;AAmBA,QAAMC,eAAe,GAAG,MAAM;AAC1Bb,IAAAA,cAAc,CAAC,CAACD,WAAF,CAAd;AACH,GAFD;;AAIA,QAAMI,eAAe,GAAIW,QAAD,IAAc;AAElCC,IAAAA,KAAK,CAACD,QAAD,CAAL,CACKT,IADL,CACUW,MAAM,IAAIA,MAAM,CAACC,IAAP,EADpB,EAEKZ,IAFL,CAEUW,MAAM,IAAI;AACZT,MAAAA,OAAO,CAACC,GAAR,CAAYQ,MAAZ;AACA1B,MAAAA,QAAQ,CAAC0B,MAAD,CAAR;AACApB,MAAAA,kBAAkB,CAAC,KAAD,CAAlB;AAEA,UAAIsB,gBAAgB,GAAI,GAAE1C,OAAQ,SAAQU,OAAQ,oBAAmBT,OAAQ,EAA7E;AACAsC,MAAAA,KAAK,CAACG,gBAAD,CAAL,CACKb,IADL,CACUW,MAAM,IAAIA,MAAM,CAACC,IAAP,EADpB,EAEKZ,IAFL,CAEUW,MAAM,IAAI;AACZT,QAAAA,OAAO,CAACC,GAAR,CAAYQ,MAAZ;AACAxB,QAAAA,QAAQ,CAACwB,MAAM,CAACG,IAAR,CAAR;AACH,OALL;AAOArB,MAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACH,KAhBL,EAiBKsB,KAjBL,CAiBWC,KAAK,IAAId,OAAO,CAACc,KAAR,CAAc,QAAd,EAAwBA,KAAxB,CAjBpB;AAmBH,GArBD;;AAuBA,QAAMC,aAAa,GAAIC,UAAD,IAAgB;AAClC7B,IAAAA,eAAe,CAACD,YAAY,CAAC+B,MAAb,CAAoBD,UAApB,CAAD,CAAf;AACH,GAFD;;AAIA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEK,CAAC5B,eAAD,gBACG,oBAAC,SAAD;AACI,IAAA,KAAK,EAAG,GAAEjB,cAAe,GAAEC,UAAW,GAAEU,KAAK,CAACoC,aAAc,EADhE;AAEI,IAAA,KAAK,EAAEpC,KAAK,CAACqC,cAFjB;AAGI,IAAA,IAAI,EAAErC,KAAK,CAACsC,QAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,gBAOG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBATR,eAcI;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE,KAAT;AAAgBC,MAAAA,MAAM,EAAE;AAAxB,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,OAAO,EAAE,MAAX;AAAmBC,MAAAA,cAAc,EAAE;AAAnC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAE1C,KAAtB;AAA6B,IAAA,OAAO,EAAEH,OAAtC;AAA+C,IAAA,QAAQ,EAAE8C,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAFJ,EAQK,CAACtC,eAAD,gBACG,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAEN,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,gBAGG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAXR,eAcI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdJ,eAiBI;AAAK,IAAA,KAAK,EAAE;AAAEyC,MAAAA,OAAO,EAAE,MAAX;AAAmBC,MAAAA,cAAc,EAAE,QAAnC;AAA6CF,MAAAA,MAAM,EAAE;AAArD,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEhB,eAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADJ,CAjBJ,EAqBKd,WAAW,iBACR,oBAAC,GAAD;AAAK,IAAA,MAAM,EAAE,CAAC,EAAD,EAAK,EAAL,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQ,CAACF,eAAD,GAAmBN,KAAK,CAAC2C,GAAN,CAAU,CAACf,IAAD,EAAOgB,KAAP,KACzBhB,IAAI,CAACiB,YAAL,iBACA,oBAAC,SAAD;AAAW,IAAA,KAAK,MAAhB;AAAiB,IAAA,KAAK,EAAEjB,IAAI,CAACiB,YAA7B;AAA2C,IAAA,aAAa,EAAEjB,IAAI,CAACkB,aAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFe,CAAnB,gBAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBANZ,CAtBR,eAgCI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhCJ,eAkCI;AAAK,IAAA,KAAK,EAAE;AAAEP,MAAAA,OAAO,EAAE,MAAX;AAAmBC,MAAAA,cAAc,EAAE;AAAnC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,YAAD;AAAc,IAAA,KAAK,MAAnB;AAAoB,IAAA,OAAO,EAAE7C,OAA7B;AAAsC,IAAA,MAAM,EAAE8C,YAAY,CAACC,OAAb,CAAqB,QAArB,CAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAlCJ,eAuCI;AAAK,IAAA,KAAK,EAAE;AAAEK,MAAAA,SAAS,EAAE;AAAb,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,QAAD;AAAU,IAAA,UAAU,EAAEjD,KAAK,CAACqC,cAA5B;AAA4C,IAAA,YAAY,EAAEjC,YAA1D;AAAwE,IAAA,MAAM,EAAEP,OAAhF;AAAyF,IAAA,eAAe,EAAEoC,aAA1G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAvCJ,CAdJ,CADJ;AA8DH;;AAED,eAAetC,eAAf","sourcesContent":["// Details of each movie\nimport React, { useEffect, useState } from 'react'\nimport { List, Avatar, Row, Col, Button } from 'antd';\nimport axios from 'axios';\n\nimport Comments from './Sections/Comments'\nimport LikeDislikes from './Sections/LikeDislikes';\nimport { API_URL, API_KEY, IMAGE_BASE_URL, IMAGE_SIZE } from '../../Config'\nimport GridCards from '../../commons/GridCards';\nimport MainImage from '../../views/LandingPage/Sections/MainImage';\nimport MovieInfo from './Sections/MovieInfo';\nimport Favourite from './Sections/Favourite';\n\n// This function brings in details of the individual movie\nfunction MovieDetailPage(props) {\n    const movieId = props.match.params.movieId\n    const [Movie, setMovie] = useState([])\n    const [Casts, setCasts] = useState([])\n    const [CommentLists, setCommentLists] = useState([])\n    const [LoadingForMovie, setLoadingForMovie] = useState(true)\n    const [LoadingForCasts, setLoadingForCasts] = useState(true)\n    const [ActorToggle, setActorToggle] = useState(false)\n    const movieVariable = {\n        movieId: movieId\n    }\n\n    useEffect(() => {\n\n        let endpointForMovieInfo = `${API_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`;\n        fetchDetailInfo(endpointForMovieInfo)\n\n        // Promise HTTP request\n        axios.post('/api/comment/getComments', movieVariable)\n            .then(response => {\n                console.log(response)\n                if (response.data.success) {\n                    console.log('response.data.comments', response.data.comments)\n                    setCommentLists(response.data.comments)\n                } else {\n                    alert('Failed to get comments Info')\n                }\n            })\n\n    }, [])\n\n    const toggleActorView = () => {\n        setActorToggle(!ActorToggle)\n    }\n\n    const fetchDetailInfo = (endpoint) => {\n\n        fetch(endpoint)\n            .then(result => result.json())\n            .then(result => {\n                console.log(result)\n                setMovie(result)\n                setLoadingForMovie(false)\n\n                let endpointForCasts = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n                fetch(endpointForCasts)\n                    .then(result => result.json())\n                    .then(result => {\n                        console.log(result)\n                        setCasts(result.cast)\n                    })\n\n                setLoadingForCasts(false)\n            })\n            .catch(error => console.error('Error:', error)\n            )\n    }\n\n    const updateComment = (newComment) => {\n        setCommentLists(CommentLists.concat(newComment))\n    }\n\n    return (\n        <div>\n            {/* Header */}\n            {!LoadingForMovie ?\n                <MainImage\n                    image={`${IMAGE_BASE_URL}${IMAGE_SIZE}${Movie.backdrop_path}`}\n                    title={Movie.original_title}\n                    text={Movie.overview}\n                />\n                :\n                <div>Loading...</div>\n            }\n\n\n            {/* Body */}\n            <div style={{ width: '85%', margin: '1rem auto' }}>\n\n                <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n                    <Favourite movieInfo={Movie} movieId={movieId} userFrom={localStorage.getItem('userId')} />\n                </div>\n\n\n                {/* Movie Info */}\n                {!LoadingForMovie ?\n                    <MovieInfo movie={Movie} />\n                    :\n                    <div>loading...</div>\n                }\n\n                <br />\n                {/* Actors Grid */}\n\n                <div style={{ display: 'flex', justifyContent: 'center', margin: '2rem' }}>\n                    <Button onClick={toggleActorView}>Toggle Actor View </Button>\n                </div>\n\n                {ActorToggle &&\n                    <Row gutter={[16, 16]}>\n                        {\n                            !LoadingForCasts ? Casts.map((cast, index) => (\n                                cast.profile_path &&\n                                <GridCards actor image={cast.profile_path} characterName={cast.characterName} />\n                            )) :\n                                <div>loading...</div>\n                        }\n                    </Row>\n                }\n                <br />\n\n                <div style={{ display: 'flex', justifyContent: 'center' }}>\n                    <LikeDislikes video videoId={movieId} userId={localStorage.getItem('userId')} />\n                </div>\n\n                {/* Comments */}\n                <div style={{ marginTop: '2rem' }}>\n                    <Comments movieTitle={Movie.original_title} CommentLists={CommentLists} postId={movieId} refreshFunction={updateComment} />\n                </div>\n\n            </div>\n\n        </div>\n    )\n}\n\nexport default MovieDetailPage\n\n"]},"metadata":{},"sourceType":"module"}