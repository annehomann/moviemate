{"ast":null,"code":"var _jsxFileName = \"/Users/annehomann/coder_academy/term4/moviemate/client/src/components/views/LoginPage/LoginPage.js\";\n// ----------------------------------------\n//         Log in Page Component\n// ----------------------------------------\nimport React, { useState } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { loginUser } from \"../../../_actions/user_actions\";\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { Form, Icon, Input, Button, Checkbox, Typography } from 'antd';\nimport { useDispatch } from \"react-redux\";\nconst {\n  Title\n} = Typography; // This function is the main engine of the Log In functionality\n\nfunction LoginPage(props) {\n  const dispatch = useDispatch(); // Box can be ticked for user log in details to be saved to local storage for easier logging in\n\n  const rememberMeChecked = localStorage.getItem(\"rememberMe\") ? true : false;\n  const [formErrorMessage, setFormErrorMessage] = useState('');\n  const [rememberMe, setRememberMe] = useState(rememberMeChecked);\n\n  const handleRememberMe = () => {\n    setRememberMe(!rememberMe);\n  };\n\n  const initialEmail = localStorage.getItem(\"rememberMe\") ? localStorage.getItem(\"rememberMe\") : '';\n  return (\n    /*#__PURE__*/\n    // Initial Log in form\n    React.createElement(Formik, {\n      initialValues: {\n        email: initialEmail,\n        password: ''\n      } // Start of schema builder for value parsing and validation\n      ,\n      validationSchema: Yup.object().shape({\n        email: Yup.string().email('Email is invalid').required('Email is required'),\n        password: Yup.string().min(6, 'Password must be at least 6 characters').required('Password is required')\n      }),\n      onSubmit: (values, {\n        setSubmitting\n      }) => {\n        setTimeout(() => {\n          let dataToSubmit = {\n            email: values.email,\n            password: values.password\n          };\n          dispatch(loginUser(dataToSubmit)).then(response => {\n            if (response.payload.loginSuccess) {\n              window.localStorage.setItem('userId', response.payload.userId);\n\n              if (rememberMe === true) {\n                window.localStorage.setItem('rememberMe', values.id);\n              } else {\n                localStorage.removeItem('rememberMe');\n              }\n\n              props.history.push(\"/\");\n            } else {\n              setFormErrorMessage('Check out your Account or Password again');\n            }\n          }).catch(err => {\n            setFormErrorMessage('Check out your Account or Password again');\n            setTimeout(() => {\n              setFormErrorMessage(\"\");\n            }, 3000);\n          });\n          setSubmitting(false);\n        }, 500);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 5\n      }\n    }, props => {\n      const {\n        values,\n        touched,\n        errors,\n        dirty,\n        isSubmitting,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        handleReset\n      } = props;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"app\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Title, {\n        level: 2,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }\n      }, \"Log In\"), /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: handleSubmit,\n        style: {\n          width: '350px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Form.Item, {\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        id: \"email\",\n        prefix: /*#__PURE__*/React.createElement(Icon, {\n          type: \"user\",\n          style: {\n            color: 'rgba(0,0,0,.25)'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 27\n          }\n        }),\n        placeholder: \"Enter your email\",\n        type: \"email\",\n        value: values.email,\n        onChange: handleChange,\n        onBlur: handleBlur,\n        className: errors.email && touched.email ? 'text-input error' : 'text-input',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 17\n        }\n      }), errors.email && touched.email && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 19\n        }\n      }, errors.email)), /*#__PURE__*/React.createElement(Form.Item, {\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        id: \"password\",\n        prefix: /*#__PURE__*/React.createElement(Icon, {\n          type: \"lock\",\n          style: {\n            color: 'rgba(0,0,0,.25)'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 27\n          }\n        }),\n        placeholder: \"Enter your password\",\n        type: \"password\",\n        value: values.password,\n        onChange: handleChange,\n        onBlur: handleBlur,\n        className: errors.password && touched.password ? 'text-input error' : 'text-input',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 17\n        }\n      }), errors.password && touched.password && /*#__PURE__*/React.createElement(\"div\", {\n        className: \"input-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 19\n        }\n      }, errors.password)), formErrorMessage && /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        style: {\n          color: '#ff0000bf',\n          fontSize: '0.7rem',\n          border: '1px solid',\n          padding: '1rem',\n          borderRadius: '10px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 25\n        }\n      }, formErrorMessage)), /*#__PURE__*/React.createElement(Form.Item, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Checkbox, {\n        id: \"rememberMe\",\n        onChange: handleRememberMe,\n        checked: rememberMe,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 17\n        }\n      }, \"Remember me\"), /*#__PURE__*/React.createElement(\"a\", {\n        className: \"login-form-forgot\",\n        href: \"/reset_user\",\n        style: {\n          float: 'right'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 17\n        }\n      }, \"forgot password\"), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        className: \"login-form-button\",\n        style: {\n          minWidth: '100%'\n        },\n        disabled: isSubmitting,\n        onSubmit: handleSubmit,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 19\n        }\n      }, \"Log in\")), \"Or \", /*#__PURE__*/React.createElement(\"a\", {\n        href: \"/register\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 20\n        }\n      }, \"register now!\"))));\n    })\n  );\n}\n\n;\nexport default withRouter(LoginPage);","map":{"version":3,"sources":["/Users/annehomann/coder_academy/term4/moviemate/client/src/components/views/LoginPage/LoginPage.js"],"names":["React","useState","withRouter","loginUser","Formik","Yup","Form","Icon","Input","Button","Checkbox","Typography","useDispatch","Title","LoginPage","props","dispatch","rememberMeChecked","localStorage","getItem","formErrorMessage","setFormErrorMessage","rememberMe","setRememberMe","handleRememberMe","initialEmail","email","password","object","shape","string","required","min","values","setSubmitting","setTimeout","dataToSubmit","then","response","payload","loginSuccess","window","setItem","userId","id","removeItem","history","push","catch","err","touched","errors","dirty","isSubmitting","handleChange","handleBlur","handleSubmit","handleReset","width","color","fontSize","border","padding","borderRadius","float","minWidth"],"mappings":"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","sourcesContent":["// ----------------------------------------\n//         Log in Page Component\n// ----------------------------------------\n\nimport React, { useState } from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport { loginUser } from \"../../../_actions/user_actions\";\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { Form, Icon, Input, Button, Checkbox, Typography } from 'antd';\nimport { useDispatch } from \"react-redux\";\n\nconst { Title } = Typography;\n\n// This function is the main engine of the Log In functionality\nfunction LoginPage(props) {\n  const dispatch = useDispatch();\n  // Box can be ticked for user log in details to be saved to local storage for easier logging in\n  const rememberMeChecked = localStorage.getItem(\"rememberMe\") ? true : false;\n\n  const [formErrorMessage, setFormErrorMessage] = useState('')\n  const [rememberMe, setRememberMe] = useState(rememberMeChecked)\n\n  const handleRememberMe = () => {\n    setRememberMe(!rememberMe)\n  };\n\n  const initialEmail = localStorage.getItem(\"rememberMe\") ? localStorage.getItem(\"rememberMe\") : '';\n\n  return (\n    // Initial Log in form\n    <Formik\n      initialValues={{\n        email: initialEmail,\n        password: '',\n      }}\n      // Start of schema builder for value parsing and validation\n      validationSchema={Yup.object().shape({\n        email: Yup.string()\n          .email('Email is invalid')\n          .required('Email is required'),\n        password: Yup.string()\n          .min(6, 'Password must be at least 6 characters')\n          .required('Password is required'),\n      })}\n      onSubmit={(values, { setSubmitting }) => {\n        setTimeout(() => {\n          let dataToSubmit = {\n            email: values.email,\n            password: values.password\n          };\n\n          dispatch(loginUser(dataToSubmit))\n            .then(response => {\n              if (response.payload.loginSuccess) {\n                window.localStorage.setItem('userId', response.payload.userId);\n                if (rememberMe === true) {\n                  window.localStorage.setItem('rememberMe', values.id);\n                } else {\n                  localStorage.removeItem('rememberMe');\n                }\n                props.history.push(\"/\");\n              } else {\n                setFormErrorMessage('Check out your Account or Password again')\n              }\n            })\n            .catch(err => {\n              setFormErrorMessage('Check out your Account or Password again')\n              setTimeout(() => {\n                setFormErrorMessage(\"\")\n              }, 3000);\n            });\n          setSubmitting(false);\n        }, 500);\n      }}\n    >\n      {props => {\n        const {\n          values,\n          touched,\n          errors,\n          dirty,\n          isSubmitting,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          handleReset,\n        } = props;\n        return (\n          <div className=\"app\">\n\n            <Title level={2}>Log In</Title>\n            <form onSubmit={handleSubmit} style={{ width: '350px' }}>\n\n              <Form.Item required>\n                <Input\n                  id=\"email\"\n                  prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                  placeholder=\"Enter your email\"\n                  type=\"email\"\n                  value={values.email}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  className={\n                    errors.email && touched.email ? 'text-input error' : 'text-input'\n                  }\n                />\n                {errors.email && touched.email && (\n                  <div className=\"input-feedback\">{errors.email}</div>\n                )}\n              </Form.Item>\n\n              <Form.Item required>\n                <Input\n                  id=\"password\"\n                  prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                  placeholder=\"Enter your password\"\n                  type=\"password\"\n                  value={values.password}\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  className={\n                    errors.password && touched.password ? 'text-input error' : 'text-input'\n                  }\n                />\n                {errors.password && touched.password && (\n                  <div className=\"input-feedback\">{errors.password}</div>\n                )}\n              </Form.Item>\n\n              {formErrorMessage && (\n                <label ><p style={{ color: '#ff0000bf', fontSize: '0.7rem', border: '1px solid', padding: '1rem', borderRadius: '10px' }}>{formErrorMessage}</p></label>\n              )}\n\n              <Form.Item>\n                <Checkbox id=\"rememberMe\" onChange={handleRememberMe} checked={rememberMe} >Remember me</Checkbox>\n                <a className=\"login-form-forgot\" href=\"/reset_user\" style={{ float: 'right' }}>\n                  forgot password\n                  </a>\n                <div>\n                  <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\" style={{ minWidth: '100%' }} disabled={isSubmitting} onSubmit={handleSubmit}>\n                    Log in\n                </Button>\n                </div>\n                Or <a href=\"/register\">register now!</a>\n              </Form.Item>\n            </form>\n          </div>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default withRouter(LoginPage);\n\n\n"]},"metadata":{},"sourceType":"module"}